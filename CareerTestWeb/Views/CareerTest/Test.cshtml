@model List<CareerTestWeb.Controllers.QuestionViewModel>

@{
    ViewData["Title"] = "Bài Test MBTI";
}

<div class="bg-light py-4">
    <div class="container">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Trang chủ</a></li>
                <li class="breadcrumb-item active">Bài Test MBTI</li>
            </ol>
        </nav>
        <h1 class="mb-0">Bài Test Tính Cách MBTI</h1>
    </div>
</div>

<div class="container py-5">
    <!-- User Info Modal -->
    <div class="modal fade" id="userInfoModal" tabindex="-1" aria-labelledby="userInfoModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title" id="userInfoModalLabel">Thông tin người dùng</h5>
                </div>
                <div class="modal-body">
                    <form id="userInfoForm">
                        <div class="mb-3">
                            <label for="userName" class="form-label">Họ và tên <span class="text-danger">*</span></label>
                            <input type="text" class="form-control" id="userName" required>
                            <div class="invalid-feedback">Vui lòng nhập họ và tên</div>
                        </div>
                        <div class="mb-3">
                            <label for="userAge" class="form-label">Tuổi <span class="text-danger">*</span></label>
                            <input type="number" class="form-control" id="userAge" min="10" max="100" required>
                            <div class="invalid-feedback">Vui lòng nhập tuổi hợp lệ (10-100)</div>
                        </div>
                        <div class="mb-3">
                            <label for="userEmail" class="form-label">Email <span class="text-danger">*</span></label>
                            <input type="email" class="form-control" id="userEmail" required>
                            <div class="invalid-feedback">Vui lòng nhập email hợp lệ</div>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="startTestBtn">Bắt đầu làm bài test</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Test Container (Initially Hidden) -->
    <div class="test-container" style="display: none;">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h2>Câu hỏi <span id="current-question">1</span>/<span id="total-questions">@Model.Count</span></h2>
            <div class="progress" style="width: 200px; height: 20px;">
                <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
            </div>
        </div>

        <div id="question-container">
            @for (int i = 0; i < Model.Count; i++)
            {
                var question = Model[i];
                <div class="question" data-question-id="@question.IDQues" style="@(i > 0 ? "display:none;" : "")">
                    <h4 class="question-text">@question.NameQues</h4>
                    @if (question.Answers != null && question.Answers.Any())
                    {
                        @foreach (var answer in question.Answers)
                        {
                            <div class="answer-option" data-answer-id="@answer.IDAns">
                                <div class="form-check">
                                    <input class="form-check-input" type="radio"
                                           name="question-@question.IDQues"
                                           id="option-@answer.IDAns"
                                           value="@answer.IDAns" required>
                                    <label class="form-check-label w-100" for="option-@answer.IDAns">
                                        @answer.NameAns
                                    </label>
                                </div>
                            </div>
                        }
                    }
                </div>
            }
        </div>

        <div class="d-flex justify-content-between mt-4">
            <button id="prev-btn" class="btn btn-secondary" disabled>
                <i class="fas fa-arrow-left me-2"></i>Câu trước
            </button>
            <button id="next-btn" class="btn btn-primary" disabled>
                Câu sau <i class="fas fa-arrow-right ms-2"></i>
            </button>
            <button id="submit-btn" class="btn btn-success" style="display: none;" disabled>
                Hoàn thành <i class="fas fa-check ms-2"></i>
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            var currentQuestion = 1;
            var totalQuestions = @Model.Count;
            var answers = {};
            var userInfo = {};

            // Hiển thị modal khi trang được tải
            var userInfoModal = new bootstrap.Modal(document.getElementById('userInfoModal'), {
                backdrop: 'static',
                keyboard: false
            });
            userInfoModal.show();

            // Xử lý sự kiện khi nhấn nút "Bắt đầu làm bài test"
            $('#startTestBtn').click(function () {
                // Kiểm tra tính hợp lệ của form
                var form = document.getElementById('userInfoForm');
                if (!form.checkValidity()) {
                    form.classList.add('was-validated');
                    return;
                }

                // Lưu thông tin người dùng
                userInfo = {
                    name: $('#userName').val(),
                    age: $('#userAge').val(),
                    email: $('#userEmail').val()
                };

                // Đóng modal và hiển thị bài test
                userInfoModal.hide();
                $('.test-container').show();
            });

            function updateProgress() {
                var progress = (currentQuestion / totalQuestions) * 100;
                $('.progress-bar').css('width', progress + '%').attr('aria-valuenow', progress);
                $('#current-question').text(currentQuestion);
            }

            function showQuestion(index) {
                $('.question').hide();
                $('.question').eq(index - 1).show();

                $('#prev-btn').prop('disabled', index === 1);

                var questionId = $('.question').eq(index - 1).data('question-id');
                if (answers[questionId]) {
                    $('#next-btn').prop('disabled', false);
                    $('#submit-btn').prop('disabled', false);
                } else {
                    $('#next-btn').prop('disabled', true);
                    $('#submit-btn').prop('disabled', true);
                }

                if (index === totalQuestions) {
                    $('#next-btn').hide();
                    $('#submit-btn').show();
                } else {
                    $('#next-btn').show();
                    $('#submit-btn').hide();
                }

                updateProgress();
            }

            $('#next-btn').click(function () {
                if (currentQuestion < totalQuestions) {
                    currentQuestion++;
                    showQuestion(currentQuestion);
                }
            });

            $('#prev-btn').click(function () {
                if (currentQuestion > 1) {
                    currentQuestion--;
                    showQuestion(currentQuestion);
                }
            });

            $('.answer-option').click(function () {
                var $this = $(this);
                var questionId = $this.closest('.question').data('question-id');
                var answerId = $this.data('answer-id');

                $this.addClass('selected').siblings().removeClass('selected');
                $this.find('input[type="radio"]').prop('checked', true);

                answers[questionId] = answerId;

                if (currentQuestion === totalQuestions) {
                    $('#submit-btn').prop('disabled', false);
                } else {
                    $('#next-btn').prop('disabled', false);
                }
            });

            $('#submit-btn').click(function () {
                var questionId = $('.question').eq(currentQuestion - 1).data('question-id');
                if (!answers[questionId]) {
                    Swal.fire('Thông báo', 'Bạn cần chọn đáp án trước khi nộp!', 'warning');
                    return;
                }

                Swal.fire({
                    title: 'Đang xử lý kết quả...',
                    text: 'Vui lòng chờ trong giây lát',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading();
                    }
                });

                // Gửi cả thông tin người dùng và kết quả test
                $.ajax({
                    url: '/CareerTest/SubmitTest',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({
                        UserInfo: userInfo,
                        UserId: 0, // Có thể bỏ qua nếu server tự tạo ID
                        Answers: Object.entries(answers).map(([k, v]) => ({
                            QuestionId: parseInt(k),
                            AnswerId: v
                        }))
                    }),
                    success: function (response) {
                        Swal.close();
                        window.location.href = '/CareerTest/Result?type=' + response.personalityType;
                    },
                    error: function () {
                        Swal.fire('Lỗi', 'Đã xảy ra lỗi khi xử lý kết quả', 'error');
                    }
                });
            });

            // Chỉ khởi tạo bài test sau khi modal đã đóng
            $('#userInfoModal').on('hidden.bs.modal', function () {
                showQuestion(currentQuestion);
                updateProgress();
            });
        });
    </script>
}
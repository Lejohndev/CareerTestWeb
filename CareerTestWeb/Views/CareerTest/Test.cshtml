@model List<CareerTestWeb.Controllers.QuestionViewModel>

@{
    ViewData["Title"] = "Bài Test MBTI";
}

<style>
    :root {
        --topcv-green: #2D8A3E;
        --topcv-green-light: #4CAF50;
        --topcv-green-dark: #1B5E20;
        --card-border-radius: 20px;
        --answer-border-radius: 15px;
    }

    * {
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 0;
        padding: 0;
        background: linear-gradient(135deg, var(--topcv-green) 0%, var(--topcv-green-dark) 100%);
        min-height: 100vh;
        color: white;
    }

    /* Hero Section */
    .hero-section {
        text-align: center;
        padding: 3rem 2rem;
        background: linear-gradient(135deg, var(--topcv-green) 0%, var(--topcv-green-dark) 100%);
    }

    .hero-title {
        font-size: 2.5rem;
        font-weight: 700;
        margin-bottom: 1rem;
        color: white;
    }

    .hero-subtitle {
        font-size: 1.2rem;
        opacity: 0.9;
        margin-bottom: 3rem;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
    }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 2rem;
        margin-bottom: 3rem;
        max-width: 1200px;
        margin-left: auto;
        margin-right: auto;
    }

    .feature-card {
        background: rgba(255, 255, 255, 0.95);
        backdrop-filter: blur(10px);
        border-radius: var(--card-border-radius);
        padding: 2rem;
        color: #333;
        text-align: center;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

        .feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        }

    .feature-icon {
        width: 80px;
        height: 80px;
        margin: 0 auto 1.5rem;
        background: linear-gradient(135deg, var(--topcv-green-light) 0%, var(--topcv-green) 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2rem;
        color: white;
    }

    .feature-title {
        font-size: 1.3rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--topcv-green-dark);
    }

    .feature-desc {
        color: #666;
        line-height: 1.6;
    }

    /* Progress Section */
    .progress-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding: 0 2rem;
    }

    .progress-text {
        font-size: 1.2rem;
        font-weight: 600;
    }

    .progress-detail {
        text-align: right;
        cursor: pointer;
        color: rgba(255, 255, 255, 0.8);
        transition: color 0.3s ease;
    }

        .progress-detail:hover {
            color: white;
        }

    .progress-bar-container {
        background: rgba(255, 255, 255, 0.2);
        height: 8px;
        border-radius: 10px;
        margin: 0 2rem 2rem;
        overflow: hidden;
    }

    .progress-bar-fill {
        height: 100%;
        background: linear-gradient(90deg, #81C784 0%, #4CAF50 100%);
        border-radius: 10px;
        transition: width 0.5s ease;
        width: 0%;
    }

    /* Question Cards */
    .questions-container {
        max-width: 1000px;
        margin: 0 auto;
        padding: 0 2rem 3rem;
    }

    .question-card {
        background: rgba(255, 255, 255, 0.98);
        backdrop-filter: blur(15px);
        border-radius: var(--card-border-radius);
        padding: 2.5rem;
        margin-bottom: 2rem;
        color: #333;
        box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

        .question-card.active {
            transform: scale(1.02);
            box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);
        }

    .question-number {
        color: var(--topcv-green);
        font-size: 1.4rem;
        font-weight: 700;
        margin-bottom: 1rem;
    }

    .question-text {
        font-size: 1.3rem;
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 2rem;
        line-height: 1.5;
    }

    .answers-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 1.5rem;
    }

    .answer-option {
        background: #f8f9fa;
        border: 2px solid #e9ecef;
        border-radius: var(--answer-border-radius);
        padding: 1.5rem;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        overflow: hidden;
    }

        .answer-option::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(76, 175, 80, 0.1), transparent);
            transition: left 0.5s ease;
        }

        .answer-option:hover {
            border-color: var(--topcv-green-light);
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.15);
        }

            .answer-option:hover::before {
                left: 100%;
            }

        .answer-option.selected {
            background: linear-gradient(135deg, #E8F5E8 0%, #F1F8E9 100%);
            border-color: var(--topcv-green);
            color: var(--topcv-green-dark);
            font-weight: 600;
            box-shadow: 0 8px 25px rgba(76, 175, 80, 0.2);
        }

            .answer-option.selected::after {
                content: '✓';
                position: absolute;
                top: 10px;
                right: 15px;
                color: var(--topcv-green);
                font-weight: 700;
                font-size: 1.2rem;
            }

    .form-check-input {
        display: none;
    }

    .answer-text {
        font-size: 1.1rem;
        line-height: 1.4;
        margin: 0;
    }

    /* Navigation Buttons */
    .navigation-container {
        display: flex;
        justify-content: center;
        gap: 2rem;
        padding: 2rem;
        max-width: 1000px;
        margin: 0 auto;
    }

    .nav-btn {
        background: rgba(255, 255, 255, 0.9);
        backdrop-filter: blur(10px);
        border: 2px solid rgba(255, 255, 255, 0.3);
        border-radius: 50px;
        padding: 1rem 2rem;
        color: var(--topcv-green-dark);
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        font-size: 1.1rem;
        min-width: 150px;
    }

        .nav-btn:hover:not(:disabled) {
            background: white;
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        }

        .nav-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .nav-btn.primary {
            background: linear-gradient(135deg, var(--topcv-green-light) 0%, var(--topcv-green) 100%);
            color: white;
            border-color: var(--topcv-green);
        }

            .nav-btn.primary:hover:not(:disabled) {
                background: linear-gradient(135deg, var(--topcv-green) 0%, var(--topcv-green-dark) 100%);
                box-shadow: 0 10px 25px rgba(76, 175, 80, 0.3);
            }

    /* Modal Styles */
    .modal-content {
        border-radius: var(--card-border-radius);
        border: none;
        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
    }

    .modal-header {
        background: linear-gradient(135deg, var(--topcv-green) 0%, var(--topcv-green-dark) 100%);
        border-radius: var(--card-border-radius) var(--card-border-radius) 0 0;
        border-bottom: none;
        padding: 2rem;
    }

    .modal-title {
        font-size: 1.5rem;
        font-weight: 700;
    }

    .modal-body {
        padding: 2rem;
    }

    .form-label {
        font-weight: 600;
        color: #2c3e50;
        margin-bottom: 0.5rem;
    }

    .form-control {
        border: 2px solid #e9ecef;
        border-radius: 12px;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: var(--topcv-green);
            box-shadow: 0 0 0 0.2rem rgba(76, 175, 80, 0.25);
        }

    /* Responsive Design */
   

    .features-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .answers-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
    }

    .question-card {
        padding: 1.5rem;
    }

    .navigation-container {
        flex-direction: column;
        align-items: center;
        gap: 1rem;
    }

    .nav-btn {
        width: 100%;
        max-width: 300px;
    }

    .progress-container {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    }

    /* Loading Animation */
    .loading-shimmer {
        background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
        background-size: 200% 100%;
        animation: shimmer 1.5s infinite;
    }

   

    /* Hide default breadcrumb and header */
    .bg-light {
        display: none;
    }
</style>

<!-- Hero Section with Features -->
<div class="hero-section">
    <h1 class="hero-title">Làm bài trắc nghiệm MBTI miễn phí</h1>
    <p class="hero-subtitle">Khám phá tiềm năng bản thân, tỏa sáng năng lực nghề nghiệp</p>

    <div class="features-grid">
        <div class="feature-card">
            <div class="feature-icon">📋</div>
            <div class="feature-title">Làm bài kiểm tra tính cách</div>
            <div class="feature-desc">Hãy là chính mình và trả lời thật lòng 70 câu hỏi để nhận về kết quả phù hợp nhất với bạn</div>
        </div>

        <div class="feature-card">
            <div class="feature-icon">📊</div>
            <div class="feature-title">Xem kết quả chi tiết</div>
            <div class="feature-desc">Tìm hiểu nhóm tính cách của bạn có ảnh hưởng như thế nào đến sự nghiệp và từng khía cạnh trong cuộc sống</div>
        </div>

        <div class="feature-card">
            <div class="feature-icon">💼</div>
            <div class="feature-title">Khám phá cơ hội nghề nghiệp</div>
            <div class="feature-desc">Khám phá <strong>40,000+ cơ hội việc làm mới nhất</strong> phù hợp với nhóm tính cách của bạn trên Topcv.vn</div>
        </div>
    </div>
</div>

<!-- User Info Modal -->
<div class="modal fade" id="userInfoModal" tabindex="-1" aria-labelledby="userInfoModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="userInfoModalLabel">Thông tin người làm test</h5>
            </div>
            <div class="modal-body">
                <form id="userInfoForm">
                    <div class="mb-3">
                        <label for="userName" class="form-label">Họ và tên <span class="text-danger">*</span></label>
                        <input type="text" class="form-control" id="userName" required>
                        <div class="invalid-feedback">Vui lòng nhập họ và tên</div>
                    </div>
                    <div class="mb-3">
                        <label for="userAge" class="form-label">Tuổi <span class="text-danger">*</span></label>
                        <input type="number" class="form-control" id="userAge" min="10" max="100" required>
                        <div class="invalid-feedback">Vui lòng nhập tuổi hợp lệ (10-100)</div>
                    </div>
                    <div class="mb-3">
                        <label for="userEmail" class="form-label">Email <span class="text-danger">*</span></label>
                        <input type="email" class="form-control" id="userEmail" required>
                        <div class="invalid-feedback">Vui lòng nhập email hợp lệ</div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="nav-btn primary" id="startTestBtn">Bắt đầu làm bài test</button>
            </div>
        </div>
    </div>
</div>

<!-- Test Container (Initially Hidden) -->
<div class="test-container" style="display: none;">
    <!-- Progress Section -->
    <div class="progress-container">
        <div class="progress-text">
            <span id="current-question">0</span>/<span id="total-questions">@Model.Count</span>
        </div>
        <div class="progress-detail">Xem chi tiết</div>
    </div>

    <div class="progress-bar-container">
        <div class="progress-bar-fill"></div>
    </div>

    <!-- Questions Container -->
    <div class="questions-container">
        @for (int i = 0; i < Model.Count; i++)
        {
            var question = Model[i];
            <div class="question-card" data-question-id="@question.IDQues" style="@(i > 0 ? "display:none;" : "")">
                <div class="question-number">@((i + 1)). @question.NameQues</div>

                @if (question.Answers != null && question.Answers.Any())
                {
                    <div class="answers-grid">
                        @foreach (var answer in question.Answers)
                        {
                            <div class="answer-option" data-answer-id="@answer.IDAns">
                                <input class="form-check-input" type="radio"
                                       name="question-@question.IDQues"
                                       id="option-@answer.IDAns"
                                       value="@answer.IDAns" required>
                                <div class="answer-text">@answer.NameAns</div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </div>

    <!-- Navigation -->
    <div class="navigation-container">
        <button id="prev-btn" class="nav-btn" disabled>
            ← Câu trước
        </button>
        <button id="next-btn" class="nav-btn primary" disabled>
            Câu sau →
        </button>
        <button id="submit-btn" class="nav-btn primary" style="display: none;" disabled>
            Hoàn thành ✓
        </button>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function () {
        var currentQuestion = 1;
        var totalQuestions = @Model.Count;
        var answers = {};
        var userInfo = {};

        // Show modal when page loads
        var userInfoModal = new bootstrap.Modal(document.getElementById('userInfoModal'), {
            backdrop: 'static',
            keyboard: false
        });
        userInfoModal.show();

        // Start test button handler
        $('#startTestBtn').click(function () {
            var form = document.getElementById('userInfoForm');
            if (!form.checkValidity()) {
                form.classList.add('was-validated');
                return;
            }

            userInfo = {
                name: $('#userName').val(),
                age: $('#userAge').val(),
                email: $('#userEmail').val()
            };

            userInfoModal.hide();
            $('.test-container').show();
            updateProgress();
            showQuestion(currentQuestion);
        });

        function updateProgress() {
            var progress = (currentQuestion / totalQuestions) * 100;
            $('.progress-bar-fill').css('width', progress + '%');
            $('#current-question').text(currentQuestion);
        }

        function showQuestion(index) {
            $('.question-card').hide().removeClass('active');
            var currentCard = $('.question-card').eq(index - 1);
            currentCard.show().addClass('active');

            $('#prev-btn').prop('disabled', index === 1);

            var questionId = currentCard.data('question-id');
            if (answers[questionId]) {
                $('#next-btn, #submit-btn').prop('disabled', false);
            } else {
                $('#next-btn, #submit-btn').prop('disabled', true);
            }

            if (index === totalQuestions) {
                $('#next-btn').hide();
                $('#submit-btn').show();
            } else {
                $('#next-btn').show();
                $('#submit-btn').hide();
            }

            updateProgress();

            // Smooth scroll to top
            $('html, body').animate({
                scrollTop: $('.questions-container').offset().top - 100
            }, 500);
        }

        $('#next-btn').click(function () {
            if (currentQuestion < totalQuestions) {
                currentQuestion++;
                showQuestion(currentQuestion);
            }
        });

        $('#prev-btn').click(function () {
            if (currentQuestion > 1) {
                currentQuestion--;
                showQuestion(currentQuestion);
            }
        });

        $('.answer-option').click(function () {
            var $this = $(this);
            var questionId = $this.closest('.question-card').data('question-id');
            var answerId = $this.data('answer-id');

            $this.addClass('selected').siblings().removeClass('selected');
            $this.find('input[type="radio"]').prop('checked', true);

            answers[questionId] = answerId;

            if (currentQuestion === totalQuestions) {
                $('#submit-btn').prop('disabled', false);
            } else {
                $('#next-btn').prop('disabled', false);
            }

            // Auto advance after selection (optional)
            setTimeout(function() {
                if (currentQuestion < totalQuestions) {
                    $('#next-btn').click();
                }
            }, 800);
        });

        $('#submit-btn').click(function () {
            var questionId = $('.question-card').eq(currentQuestion - 1).data('question-id');
            if (!answers[questionId]) {
                Swal.fire('Thông báo', 'Bạn cần chọn đáp án trước khi nộp!', 'warning');
                return;
            }

            Swal.fire({
                title: 'Đang xử lý kết quả...',
                text: 'Vui lòng chờ trong giây lát',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            $.ajax({
                url: '/CareerTest/SubmitTest',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({
                    UserId: 1,
                    Answers: Object.entries(answers).map(([k, v]) => ({
                        QuestionId: parseInt(k),
                        AnswerId: v
                    }))
                }),
                success: function (response) {
                    Swal.close();
                    window.location.href = '/CareerTest/Result?type=' + response.personalityType;
                },
                error: function () {
                    Swal.fire('Lỗi', 'Đã xảy ra lỗi khi xử lý kết quả', 'error');
                }
            });
        });
    });
</script>